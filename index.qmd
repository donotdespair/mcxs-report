---
title: "Estimating the impact of monetary policy shocks on different housing indicators: An SVAR Approach"
author: "Yobin Timilsena"

execute:
  echo: false
  
format: 
  html:
    toc-location: left
  
bibliography: references.bib
---

> **Abstract.**  <under construction!> 
>
> **Keywords.** bsvars, impulse responses, quarto, R, housing price index, monetary policy shocks


# Introduction
Monetary policy is one of the key instruments used by central banks to influence the overall economic activity. In recent years, the housing market has become an increasingly important channel through which monetary policy affects the broader economy (@AK_2017), particularly in Australia where around 57% of household wealth is tied up in the housing market (@Sweeney_2023). That number is thrice as big as the size of the super market in Australia and as such, understanding the relationship between monetary policy shocks and the housing market is crucial for policymakers, investors, and households alike.

In this study, we aim to estimate the impact of monetary policy shocks on various housing indicators using a Structural Vector Autoregression (SVAR) modeling approach. SVAR models are a popular econometric tool for investigating the dynamic interactions between macroeconomic variables. By applying this approach, we seek to shed light on how changes in monetary policy impact different dimensions of the housing market.

# Research Question
The objective of this paper is to estimate and quantify the impact of monetary policy shocks on different indicators of the housing market such as housing prices, housing transactions/sales, and the total number of housing units within an economy. Understanding these effects is crucial in understanding how money affects a key factor of the real side of the economy. An extension to this paper could be determining whether monetary policy shocks create a tradeoff between controlling housing prices and controlling economic activity.

# Data and their Properties
## Empirical Project Setup
This project website is being developed as a **Quarto** document and the empirical work in conducted using `R`. The necessary datasets are imported from the Reserve Bank of Australia (RBA) and the Australian Bureau of Statistics (ABS) websites using `readrba` and `readabs` respectively.

```{r load packages, include=FALSE}
rm(list = ls())
pkgs <- c('ggplot2', 'tidyr', 'dplyr', 'lubridate', 'readrba', 'readabs', 'tidyverse', "xts", "plotly", "rmarkdown", "zoo", "quantmod")
# install.packages(pkgs)
lapply(pkgs, library, character.only=TRUE)
```


## Choice of variables
I use the following variables to answer this question. I discuss the relevance of each variable.

- $\log(M1)$: represents the log of the money supply M1. Both conventional and unconventional monetary policy shocks can change the stock of money supply and its size affects real variables of the economy.

- $\Delta CPI$: represents the year-on-year change in the Consumer Price Index (CPI). It is a measure of inflation in an economy and is affected by monetary policy shocks.

- $\log(c)$: represents the log of consumption of the economy. Monetary policy shocks can alter people's consumption-savings behavior.

- $\log(GDP)$: represents the log of the Gross Domestic Product (GDP). Including this along with the consumption helps differentiate the effect on the non-consumption aspect of the economy.

- $loanrate$: represents the weighted average interest rates on owner-occupied home loans. 

- $AUCR$: represents the Australian Cash Rate Target. This is the major monetary policy instrument available to the RBA.

- $USFFR$: represents the Federal Funds Rate Maximum Target Rate. Monetary policy adopted in the US tend to ripple into other economies so this is a variable of interest. Another extension to this variable would be to include the Target rates of Australia's largest trading partners.

- $nhouses$: represents the number of new private dwellings (houses) approved for construction in Australia. Impact on housing prices might be dampened by the supply elasticity of housing captured by this variable.

- $PPI$: represents the Property Price Index in Australia. The index is normalized with respect to the property prices in 2011-2012.


```{r download relevant variables, eval=FALSE, warning=FALSE}

# M1 Money Supply; quarterly; billions; log
m1.raw        <- read_rba_seriesid("DMAM1N")
m1.qtr        <- to.quarterly(xts(m1.raw$value, m1.raw$date), OHLC = F)
m1.qtr[,]     <- log(m1.qtr[,])

# Change in CPI; quarterly; pct change yoy
# Use cpi.raw <- read_rba_seriesid("GCPIAG") to get actual index value.
cpi.raw       <- read_rba_seriesid("GCPIAGYP")
cpi.qtr       <- to.quarterly(xts(cpi.raw$value, cpi.raw$date), OHLC = F)

# Consumption share of GDP; quarterly; millions -> billions; log
consumption.raw    <- read_rba_seriesid("GGDPECCVPSH")
consumption.qtr    <- to.quarterly(xts(consumption.raw$value, consumption.raw$date), OHLC = F)
consumption.qtr[,] <- log(consumption.qtr[,]/1000)

# Nominal GDP; quarterly; millions -> billions; log
gdp.raw       <- read_rba_seriesid("GGDPECCPGDP")
gdp.qtr       <- to.quarterly(xts(gdp.raw$value, gdp.raw$date), OHLC = F)
gdp.qtr[,]    <- log(gdp.qtr[,]/1000)

# Owner-occupied variable home loan rates; monthly; 
homeloan.raw  <- read_rba_seriesid("FILRHLBVS")
homeloan.qtr  <- to.quarterly(xts(homeloan.raw$value, homeloan.raw$date), OHLC = F)


# AUS CR Target Rate; monthly; starts from 1990
cashrate.raw  <- read_rba_seriesid("FOOIRATCR")
cashrate.qtr  <- to.quarterly(xts(cashrate.raw$value, cashrate.raw$date), OHLC = F)

# US FFR Max Target Rate; monthly -> quarterly,
usffr.raw     <- read_rba_seriesid("FOOIRUSFFTRMX")
usffr.qtr     <- to.quarterly(xts(usffr.raw$value, usffr.raw$date), OHLC = F)

# real money balances


# quantity of dwelling units, houses; monthly; jul 1983
nhomes.raw    <- read_abs_series("A418433F")
nhomes.qtr    <- to.quarterly(xts(nhomes.raw$value, nhomes.raw$date), OHLC = F)
nhomes.qtr[,] <- log(nhomes.qtr[,]/1000)

# Residential property price index; quarterly; sep 2003
homeprice.raw <- read_abs_series("A83728455L")
homeprice.qtr <- to.quarterly(xts(homeprice.raw$value, homeprice.raw$date), OHLC = F)
```

```{r : truncating data; creating a dataframe, eval=FALSE}
df <- as.data.frame(na.omit(cbind(m1.qtr,cashrate.qtr,usffr.qtr)))
df                                      <- head(df,-1) # remove the last obs 
colnames(df)                            <- c("M1 Money Supply (logs)","RBA Target Cash Rate","US FFR Max Target Rate")
df["% Change in CPI, yoy"]              <- as.numeric(cpi.qtr[269:length(cpi.qtr)])                 
df["Aggregate Consumption (log)"]       <- as.numeric(tail(consumption.qtr,nrow(df)))
df["Nominal GDP (log)"]                 <- as.numeric(tail(gdp.qtr,nrow(df)))
df["Owner-occupied home loan rates"]    <- as.numeric(tail(homeloan.qtr,nrow(df)+1))[-133]
df["Quantity of new homes"]                 <- as.numeric(tail(nhomes.qtr,nrow(df)+1))[-133]
df                                      <- head(df,-4) # drop the last 4 obs 
df["House Price Index"]                 <- NA 
df[55:128,"House Price Index"]          <- as.numeric(homeprice.qtr)
df                                      <- na.omit(df)
df                                      <- df %>% select("Nominal GDP (log)", "Aggregate Consumption (log)",
                                                         "% Change in CPI, yoy", "Quantity of new homes",
                                                         "House Price Index", "Owner-occupied home loan rates",
                                                         "M1 Money Supply (logs)", "US FFR Max Target Rate",
                                                         "RBA Target Cash Rate")
```

```{r : save loaded data, eval=FALSE}
save.image(file="ProjectData.RData")
```


```{r : Step 0 - Load saved data, eval=TRUE, include=FALSE}
  rm(list = ls())
  load(file = "ProjectData.RData") # load saved empirical data if needed

```

## Data Properties
The variables discussed above are illustrated in the figure below. Note that the logged variables trend upwards because they are expressed in their levels, while variables expressed in percentage change terms do not exhibit this behavior.


The dataset will be used in the sample consists quarterly data from 2003 Q3 to 2021 Q4, including 74 observations, plots of truncated dataset is shown as: 


```{r, echo=TRUE}
var_names <- colnames(df)
date_range <- as.yearqtr(rownames(df), format = "%Y Q%q")
par(mfrow = c(3,3), mar=c(2,2,2,2))
for (j in 1:ncol(df)){
  plot(x = date_range, y = df[,j],,type='l',
       main = paste(var_names[j]), ylab = "", xlab = "",
       lwd = 2.5,
       ylim = c(min(df[,j]),max(df[,j])))
}

```


### ADF Tests
Next, I perform and display ADF test results on the variables. I report, for each variable, the difference level at which the ADF tests rejects the null that the series is non-stationary. 

```{r : perform adf tests on the data, warning= FALSE, echo=TRUE}

perform_adf_tests <- function(df) {
  # Create an empty dataframe to store the results
  results <- data.frame(Variable = character(), TestType = character(), 
                        TestStatistic = numeric(), PValue = numeric(), 
                        stringsAsFactors = FALSE)

  # Iterate over each column in the dataframe
  for (col in colnames(df)) {
    # Remove NA values from the column
    column_data <- na.omit(df[[col]])

    # Perform ADF test for levels
    adf_levels <- tseries::adf.test(na.omit(column_data), k = 4)

    # Check if p-value is less than or equal to 0.05
    if (adf_levels$p.value <= 0.05) {
      results <- bind_rows(results,
        data.frame(Variable = col, TestType = "Levels", 
                   TestStatistic = adf_levels$statistic,
                   PValue = adf_levels$p.value)
      )
    } else {
      # Perform ADF test for first difference
      adf_diff1 <- tseries::adf.test(na.omit(diff(column_data)), k = 4)
      
      # Check if p-value is less than 0.05
      if (adf_diff1$p.value < 0.05) {
        results <- bind_rows(results,
          data.frame(Variable = col, TestType = "First Difference", 
                     TestStatistic = adf_diff1$statistic,
                     PValue = adf_diff1$p.value)
        )
      } else {
        # Perform ADF test for second difference
        adf_diff2 <- tseries::adf.test(na.omit(diff(column_data, differences = 2)), k = 4)
        
        results <- bind_rows(results,
            data.frame(Variable = col, TestType = "Second Difference", 
                       TestStatistic = adf_diff2$statistic,
                       PValue = adf_diff2$p.value)
          )
      }
    }
  }


  # Return the results dataframe
  return(results)
}

adf_test_results <- perform_adf_tests(df)
rmarkdown::paged_table(adf_test_results)

```
### ACF Plots
```{r : ACF, include=TRUE}
#| label: ACF-Plots
#| fig-cap: "ACF Plots for our data"
par(mfrow = c(3,3), mar=c(2,2,2,2))
for (j in 1:ncol(df)){
  acf(df[,j], xlab="")
  title(main=var_names[j])
}

```
### PACF Plots
```{r : PACF, include=TRUE}
#| label: PACF-Plots
#| fig-cap-location: top
#| fig-cap: "PACF Plots for our data"
par(mfrow = c(3,3), mar=c(2,2,2,2))
for (j in 1:ncol(df)){
  pacf(df[,j], xlab="")
  title(main=var_names[j])
}
```


# Model and Hypothesis
I employ a structural VAR model to assess the impact of monetary policy shocks on different housing indicators. The SVAR model with $p$ lags can be written as
$$
\begin{align}
&B_0Y_t = B_0 + B_1 Y_{t-1} + \dots + B_p Y_{t-p} + U_t\\
&U_{t}| Y_{t-1} \dots Y_{t-p} \sim _{iid} ( 0_N, I_N)
\end{align}
$$ 
where $Y_t = [\log(M1_t), \Delta CPI_t, \log(c_t), \log(GDP_t), loanrate_t, AUCR_t, USFFR_t, nhouses_t, PPI_t]'$.

$B_0$ is a **structural matrix ** that captures the contemporaneous relationship between the variables in $Y_t$. $U_t$ represents conditionally independent **structural shocks**.

The structural model can be estimated utilizing the information from its corresponding RF model
$$
\begin{align}
&Y_t = A_0 + A_1 Y_{t-1} + \dots + A_p Y_{t-p} + E_t\\
&E_{t}| Y_{t-1} \dots Y_{t-p} \sim _{iid} ( 0_N, \Sigma)
\end{align}
$$ 
where $A_i = B_0^{-1}B_i$ and $B_0^{-1}I_N  (B_0^{-1})'$.


The identification in the SVAR model can be achieved either by using some exclusion restrictions, sign restrictions, instrumental variables, or prior distribution. The next section will talk about the exact composition of the structural matrix and the conditions for identification. 

## Basic Model
### Identification
I plan to use exclusion-restrictions to identify the structural matrix $B_0$. In particular, I will employ the solution concept in @waggoner2003b who use a normalization rule as an optimal solution to the local identification problem. I then employ the Gibbs sampler for a SVAR model with exclusion restrictions as in @waggoner2003a.

$$ B_0 Y = B_+ X + U, \qquad \qquad U|X \sim \mathcal{MN}_{N \times T}(\textbf{0}_{N \times T}, I_T, I_N) $$
where 

$B_0$ is a $N \times N$ contemporaneous effects matrix.

$Y = [y_1, \dots, y_T]$ is a $N \times T$ matrix of observations.

$B_+ = [B_d, B_1, \dots, B_p]$ is a $N \times K$ matrix of autoregressive parameters, where $K = Np + d$  ($d$ is the number of deterministic terms; $p$ is the number of lags).

$X = [x_1, \dots, x_T]$ is a $K \times T$ matrix of lagged observations where each $x_t = (1, y_{t-1}, \dots, y_{t-p})'$.

$U = [u_1, \dots, u_T]$ is a $N \times T$ matrix of structural shocks.

For convenience of coding and inference purposes, we consider a row-wise equation form as follows:
$$ B_{0[n.\cdot]} Y = B_{+n} X + U_n, \qquad \qquad U_n|X \sim \mathcal{N}(\mathbf{0}_T, I_T) $$

If $r_n$ denotes the number of elements in the $n^{th}$ row of $B_0$ that stay unrestricted, then we can further decompose $B_{0[n.\cdot]}$ into $b_n$ and $V_n$. 

$b_n$ is a $1 \times r_n$ vector of unrestricted elements in the $n^{th}$ row of $B_0$.

$V_n$ is a $r_n \times N$ matrix which places elements of $b_n$ in the appropriate positions to impose the restrictions on $B_0$. 

Then, the row-wise equation form can be written as follows:
$$ b_n V_n Y = B_{+n} X + U_n, \qquad \qquad U_n|X \sim \mathcal{N}(\mathbf{0}_T, I_T) $$
Following @waggoner2003a and @arias2018a, we define that $(B_+, B_0)$ follow jointly a Normal-Generalised Normal (NGN) distribution denoted as 
$$ p(B_+, B_0) \sim \mathcal{NGN}(B, \Omega, S, \nu)$$ 

if $B_{+n}$ follows a K-variate normal distribution given $b_n$ 
$$ p(B_{+n}|b_n) = \mathcal{N}_k(b_nV_nB, \Omega) $$  with kernel $$ p(B_{+n}|b_n) \propto \exp \left\{  -\frac{1}{2} \left( B_{+n} - b_nV_nB \right) \Omega^{-1}  \left( B_{+n} - b_nV_nB \right)' \right\} $$


for $n = 1, \dots, N$ and $b_1, \dots, b_N$ jointly have a distribution whose kernel is specified by 
$$ p(b_1, \dots, b_N) \propto | \det(B_0) |^{\nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n S^{-1} V_n' b_n'  \right\} $$

The joint-distribution of $(B_+, B_0)$ can then be written as
$$ p(B_0, B_+) = \left( \prod_{n=1}^N p(B_{+n}|b_n)\right) p(b_1, \dots, b_N) $$

```{r : Impose the type of exclusion restriction, echo=TRUE}

ltexclusion = function(usedata){
  BM.V        = vector("list",usedata$N)
for (n in 1:usedata$N){
  BM.V[[n]]   = cbind(diag(n),matrix(0,n,usedata$N-n))
}

B0.initial    = matrix(0,usedata$N,usedata$N)
for (n in 1:usedata$N){
  unrestricted               = apply(BM.V[[n]],2,sum)==1
  B0.initial[n,unrestricted] = rnorm(sum(unrestricted))
}
B0Vlist       = list(B0.initial = B0.initial, V = BM.V)
}
```

### Prior distribution
Given this parameterisation, we can write down the kernel of the **prior** given hyperparameters $(\underline B, \underline \Omega, \underline S, \underline \nu)$ as follows:
$$ | \det(B_0) |^{\underline \nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n \underline S^{-1} V_n' b_n'  \right\}  \exp \left\{  -\frac{1}{2}  \sum_{n=1}^N  \left( B_{+n} - b_nV_n \underline B \right) \underline \Omega^{-1}  \left( B_{+n} - b_nV_n \underline B \right)' \right\}  $$
This prior distribution has two key advantages. Firstly, it leads to a full-conditional posterior distributions that allow efficient sampling. This allows us to estimate the structural parameters of the SVAR model.

Secondly, it belongs to a class of reference prior distributions that are invariant to the pre-multiplication of the parameter matrices by a rotation matrix up to which the system is identified (see @rr2010). This allows us to conduct a proper Bayesian treatment of this model given the identification above.

<!-- $$ -->
<!-- \begin{align*} -->
<!--   B_0 = -->
<!--   \begin{bmatrix} -->
<!--     1 & 0 & 0 & 0  & 0  & 0  & 0  & 0  & 0  \\ -->
<!--     b_{21} & 1 & & & & & & & \\ -->
<!--     b_{31} & b_{32} & 1 & & & & & & \\ -->
<!--     b_{41} & b_{42} &  & 1 & & & & & \\ -->
<!--     b_{51} & b_{52} & & & 1 & & & & \\ -->
<!--     b_{61} & b_{62} & & & & 1 & & & \\ -->
<!--     b_{71} & b_{72} & & & & & 1 & & \\ -->
<!--     b_{81} & b_{82} & & & & & & 1 & \\ -->
<!--     b_{91} & b_{92} & & & & & & & 1 -->
<!--   \end{bmatrix} -->
<!-- \end{align*} -->
<!-- $$ -->


```{r : include code from L16 codes.R}
  source("L16 codes.R")
```

#### Calibration of the prior
- $\underline \nu = N$ is a commonly chosen value as it implies that the generalised-normal part is equivalent to a $r_n$-variate normal with the mean equal to a vector of zeros and the covariance matrix equal to $\underline S$.
- $\underline S = \kappa_3 I_N$ implies that the covariances across the rows of $B_0$ is zero, and the variance of each row is homoskedastic (constant). $\kappa_3$ can be interpreted as a contemporaneous effects shrinkage and is set to 10.
- $\underline B = [0_{N \times 1} \; \kappa_4 I_N \; 0_{N \times (p-1)N}]$ implies an AR1 process for the structural VAR at the prior mean. In this calibration, $\kappa_4 = 1$, the AR1 process is a random walk process.
- $\underline \Omega = \begin{pmatrix} \kappa_2 & 0\\ 0 & \kappa_1 I_{Np} \end{pmatrix}$ is the prior covariance matrix. It is taken to be a diagonal matrix with the diagonal elements set as the Litterman prior. $\kappa_2$ represents the constant term shrinkage and is set to 10. $\kappa_1$ represents the autoregressive slope shrinkage and is set to 0.1.

```{r : define the prior function, echo=TRUE}
# A function that computes and stores all the prior distribution components given a parameter list input
prior     = function(parameters, usedata){
  priors  = list(
  B       = cbind(rep(0,usedata$N), parameters$kappa4*diag(usedata$N), matrix(0, usedata$N, (usedata$p-1)*usedata$N)), # random walk prior
  Omega   = diag(c(parameters$kappa2,parameters$kappa1*((1:usedata$p)^(-2))%x%rep(1,usedata$N))),
  # Omega = diag(c(parameters$kappa2,parameters$kappa1*rep(1,usedata$N*usedata$p))),
  S       = parameters$kappa3*diag(usedata$N),
  nu      = usedata$N
  )
}
```

```{r : set prior parameters, echo=TRUE}

# set the priors

parameters = list(
  kappa1    = .1,       # autoregressive slope shrinkage
  kappa2    = 10,      # constant term shrinkage
  kappa3    = 10,      # contemporaneous effects shrinkage
  kappa4    = 1,       # VAR prior persistence
  S         = 5000,
  S.burnin  = 100
)
```

We also calibrate the number of draws $S = 5000$ for any sampling, while the $S.burnin = 100$ represents the number of draws that are sampled first and then discarded.

### Likelihood Function
The conditional normality of the error term allows us to write the kernel of the likelihood function and show that it can be expressed as a NGN distribution.
$$
\begin{align*}
    &L(B_+, B_0|Y,X) \propto | \det(B_0^{-1}B_0^{-1'})|^{-\frac{T}{2}} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N \left(b_n V_n Y - B_{+n} X \right) \left( b_n V_n Y - B_{+n} X  \right)' \right\}\\
    & = | \det(B_0)|^{T} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N \left( b_n V_n Y Y' V_n' b_n' - 2 b_n V_n Y X' B_{+n}' + B_{+n} X X' B_{+n}' \right) \right\}\\
    & = | \det(B_0)|^{T} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N \left( b_n V_n Y Y' V_n' b_n' + B_{+n} X X' B_{+n}' - 2 b_n V_n Y X' (XX')^{-1} (XX') B_{+n}' \right. \right. \\
    & \left. \left. + b_n V_n Y X' (XX')^{-1} (XX') (XX')^{-1} XY'V_n'b_n' - b_n V_n Y X' (XX')^{-1} (XX') (XX')^{-1} XY'V_n'b_n' \right) \right\}\\
    & = | \det(B_0)|^{T} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N \left( b_n V_n [ YY' - YX'(XX')^{-1}XY'] V_n' b_n'  + B_{+n} X X' B_{+n}' \right. \right. \\
    & \left. \left. - 2 b_n V_n Y X' (XX')^{-1} (XX') B_{+n}' + b_n V_n Y X' (XX')^{-1} XY' V_n' b_n' \right) \right\}\\
    & \text{}\\
    & \text{Let $\hat A = YX' (XX')^{-1} $, then we can simplify}\\
    & \text{}\\
    & =  | \det(B_0)|^{T} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N \left( b_n V_n [ YY' - \hat A XY'] V_n' b_n'  + B_{+n} X X' B_{+n}' - 2 b_n V_n \hat A (XX') B_{+n}' \right. \right.\\ & \left. \left. + b_n V_n \hat A XY' V_n' b_n' \right) \right\}\\
    & =  | \det(B_0)|^{T} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N \left( b_n V_n [ YY' - \hat A XY'] V_n' b_n'  + (B_{+n} - b_n V_n \hat A) X X' (B_{+n} - b_n V_n \hat A)' \right) \right\}\\
    & =  | \det(B_0)|^{T} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n [ YY' - \hat A XY'] V_n' b_n' \right\} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N (B_{+n} - b_n V_n \hat A) X X' (B_{+n} - b_n V_n \hat A)' \right\}
\end{align*}
$$

Comparing this with the general NGN kernel, we can write that

$$ L(B_+, B_0|Y, X) = \mathcal{NGN}(\tilde B, \tilde \Omega, \tilde S, \tilde \nu) $$
where

$$ \tilde B = \hat A, \quad \tilde \Omega = (XX')^{-1}, \quad \tilde S = ( YY' - \hat A XY')^{-1}, \quad \tilde \nu = T + N. $$
Hence, we have shown that the likelihood function follows a NGN distribution.

### Posterior Distribution
The prior and the likelihood can be used to obtain the posterior as follows:

$$
\begin{align*}
    & p(B_+, B_0|Y, X)  \propto L(B_+, B_0|Y, X) p(B_0, B_+)\\
    & = | \det(B_0)|^{T} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N \left(b_n V_n Y - B_{+n} X \right) \left( b_n V_n Y - B_{+n} X  \right)' \right\}\\
    & \times | \det(B_0) |^{\underline \nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n \underline S^{-1} V_n' b_n'  \right\}  \exp \left\{  -\frac{1}{2}  \sum_{n=1}^N  \left( B_{+n} - b_nV_n \underline B \right) \underline \Omega^{-1}  \left( B_{+n} - b_nV_n \underline B \right)' \right\} \\
    & =  | \det(B_0) |^{T + \underline \nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N \left(b_n V_n Y Y' V_n' b_n' - 2 b_n V_n Y X' B_{+n}' + B_{+n} X X' B_{+n}' \right) \right.\\
    & \left. + b_n V_n \underline S^{-1} V_n' b_n' + B_{+n} \underline \Omega^{-1} B_{+n}' - 2 b_n V_n \underline B \underline \Omega^{-1} B_{+n}' + b_n V_n \underline B \underline \Omega^{-1} \underline B' V_n' b_n' \right\}\\
    & =  | \det(B_0) |^{T + \underline \nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n [ YY' + \underline S^{-1} + \underline B \underline \Omega^{-1} \underline B'] V_n' b_n' - 2 b_n V_n [ YX' + \underline B \underline \Omega^{-1} ] B_{+n}' \right.\\
    & \left. + B_{+n} [ XX' + \underline \Omega^{-1} ] B_{+n}' \right\}\\ & \text{}\\
    & \text{ Let $ \bar \Omega = (XX' + \underline \Omega^{-1})^{-1} $, then we can write}\\ & \text{}\\
    & =  | \det(B_0) |^{T + \underline \nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n [ YY' + \underline S^{-1} + \underline B \underline \Omega^{-1} \underline B'] V_n' b_n' - 2 b_n V_n [ YX' + \underline B \underline \Omega^{-1} ] \bar \Omega \bar \Omega^{-1} B_{+n}' \right.\\
    & \left. + B_{+n} \bar \Omega^{-1} B_{+n}' \right\}\\
    & \text{}\\
    & \text{ Let $ \bar B = (YX' + \underline B \underline \Omega^{-1}) \bar \Omega $, then we can write}\\ & \text{}\\
    & =  | \det(B_0) |^{T + \underline \nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n [ YY' + \underline S^{-1} + \underline B \underline \Omega^{-1} \underline B' - \bar B \bar \Omega^{-1} \bar B' ] V_n' b_n'  \right.\\
    & \left.  + b_n V_n  \bar B \bar \Omega^{-1} \bar B' V_n' b_n' - 2 b_n V_n \bar B \bar \Omega^{-1} B_{+n}' + B_{+n} \bar \Omega^{-1} B_{+n}' \right\}\\
    & \text{}\\
    & \text{ Define $ \bar S = (YY' + \underline S^{-1} + \underline B \underline \Omega^{-1} \underline B' - \bar B \bar \Omega^{-1} \bar B')^{-1} $, then we can write}\\ & \text{}\\
    & =  | \det(B_0) |^{T + \underline \nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n \bar S^{-1} V_n' b_n'  + (B_{+n} - b_n V_n \bar B) \bar \Omega^{-1} (B_{+n} - b_n V_n \bar B)' \right\}\\
    &  = | \det(B_0) |^{T + \underline \nu - N} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n \bar S^{-1} V_n' b_n'  \right\} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N (B_{+n} - b_n V_n \bar B) \bar \Omega^{-1} (B_{+n} - b_n V_n \bar B)' \right\}
\end{align*}
$$
Thus, $$ p(B_+, B_0|Y,X) \sim \mathcal{NGN}(\bar B, \bar \Omega, \bar S, \bar \nu) $$
where the first three parameters are defined above and $\bar \nu = T + \underline \nu$.

The following `R` function uses the prior and information contained in data to compute and store (as a list) the set of posterior parameters for our model. 
```{r : define the posterior function, echo=TRUE}
posterior     = function(priors, usedata){
  Omega.inv   = solve(priors$Omega)
  Omega.post.inv = usedata$X%*%t(usedata$X) + Omega.inv
  Omega.post  = solve( Omega.post.inv )
  B.post      = (usedata$Y%*%t(usedata$X) + priors$B%*%Omega.inv) %*% Omega.post
  S.post      = solve(usedata$Y%*%t(usedata$Y) + solve(priors$S) + priors$B%*%Omega.inv%*%t(priors$B) - B.post%*%Omega.post.inv%*%t(B.post) )
  nu.post     = ncol(usedata$Y) + priors$nu

  posteriors  = list(
  B           = B.post,
  Omega       = Omega.post,
  S           = S.post,
  nu          = nu.post
)
}

```



The following is the code to sample using the Gibbs sampler. More information on the specifics of this code will be added soon.
```{r : function to sample B0 and then B+ using wz2003, echo=TRUE}
posteriorSimulations  = function(parameters, posteriors, B0Vlist, N){
  t0                  = proc.time()
  B0.posterior        = rgn(n=parameters$S.burnin, S.inv=solve(posteriors$S), nu=posteriors$nu, V=B0Vlist$V, B0.initial=B0Vlist$B0.initial)
  t1                  = proc.time()
  (t1-t0)/60
  
  # sampling B0 from the posterior distribution using Gibbs
  t0                  = proc.time()
  B0.posterior        = rgn(n=parameters$S, S.inv=solve(posteriors$S), nu=posteriors$nu, V=B0Vlist$V, B0.initial=B0.posterior[,,parameters$S.burnin])
  t1                  = proc.time()
  (t1-t0)/60
  
  # normalisation
  B0.hat              = t(chol((posteriors$nu-N)*posteriors$S))                   # normalisation using this B0.hat should work
  BM.B0.posterior     = normalize.Gibbs.output.parallel(B0.posterior,B0.hat=B0.hat)
  t2                  = proc.time()
  (t2-t1)/60
  
  # sample B+ from the normal conditional posterior
  t2                  = proc.time()
  BM.Bp.posterior     = rnorm.ngn(BM.B0.posterior, B=posteriors$B,Omega=posteriors$Omega)
  t3                  = proc.time()
  (t3-t2)/60
  
  list(B0.posterior   = BM.B0.posterior, Bp.posterior = BM.Bp.posterior)
}
```

This function computes the sample average of the $B_0$ and $B_+$ matrices obtained from each sampling step.
```{r : function to compute means for posterior B0 and B+, echo=TRUE}
posteriorMeans = function(Bposteriors){
  Bposteriors.means = list(
  B0 = rowMeans(Bposteriors$B0.posterior, dims = 2),
  Bp = rowMeans(Bposteriors$Bp.posterior, dims = 2)
  )
}
```

### Simulation Run

The following code generates artificial data containing 1000 observations from a bi-variate Gaussian random walk process with the covariance matrix equal to the identity matrix of order 2.
```{r : Step 1 - Generate artificial data, echo=TRUE}

set.seed(12345)

sim.p = 1
sim.T = 1000
sim.N = 2
sim.K = 1 + sim.N*sim.p

sim.Y           = arima.sim(list(order = c(0,1,0)), n = sim.T + sim.p-1, mean = 0, sd =1)
for (i in 2:sim.N){
  sim.Y         = rbind(sim.Y, arima.sim(list(order = c(0,1,0)), n = sim.T + sim.p-1, mean = 0, sd = 1))
}

sim.X           = matrix(1,1,sim.T)
for (i in 1:sim.p){
  sim.X         = rbind(sim.X, sim.Y[,(sim.p+1-i):(ncol(sim.Y)-i)])
}
sim.Y           = sim.Y[,-sim.p]
artificialdata  = list(p = sim.p, N = sim.N, K = sim.K, Y = sim.Y, X = sim.X)

```



We obtain a list of simulation priors and posteriors. 
```{r : Step 2 - Compute priors and posteriors for simulated data, echo=TRUE}
sim.priors      = prior(parameters, artificialdata)
sim.posteriors  = posterior(sim.priors, artificialdata)
```

We create a list of $V_n$ and $b_n$ corresponding to a lower triangular exclusion restriction on $B_0$.
```{r : Step 3 - Impose exclusion restriction on simulated data; get b_n and V_n, echo=TRUE}
sim.B0Vlist   = ltexclusion(artificialdata)
```

We sample the $B_0$ and $B_p$ posteriors using the Gibbs sampler, and save the data for future use.
```{r : Step 4 - estimate and draw B0 and B+, save  simulated data, include=TRUE, eval=FALSE}

sim.Bposteriors       = posteriorSimulations(parameters, sim.posteriors, sim.B0Vlist, artificialdata$N)
save(sim.Bposteriors, sim.priors, sim.posteriors, file = "sim-posteriors.RData")

```

```{r : Step 4b - load saved simulated posteriors, eval=TRUE}
load(file = "sim-posteriors.RData")
```

```{r : function to print matrix in latex format, results='asis'}
pmatrix <- function(x) {
  cat(c("$$\\begin{equation*}\n",
    "\\left(",
    knitr::kable(x, format = "latex", 
                 tabular = "array",
                 vline = "",
                 align = "c",
                 linesep = "",
                 toprule = NULL,
                 bottomrule = NULL),
    "\n\\right)\\, .\n",
    "\\end{equation*}$$\n"))
}
```


```{r : Step 5a - Compute the posterior means of B0 for simulated data, echo=TRUE, results='asis'}
sim.Bposteriors.means = posteriorMeans(sim.Bposteriors)
sim_B0 = pmatrix(sim.Bposteriors.means$B0)
```
We can see that the computed $B_0$ covariance matrix is numerically identical to an identity matrix.

```{r : Step 5b - Compute the posterior means of Bp for simulated data, echo=TRUE, results='asis'}
sim_Bp = pmatrix(sim.Bposteriors.means$Bp)
```
The first column of $B_+$ represents the posterior mean of the constant term. The values are small and close to zero.
The rest of the $B_+$ matrix represents the autoregressive matrix. Its posterior mean is numerically equal to an identity matrix.


### Data Results

```{r : Step 1 - set lags, create Y and X matrices, echo=TRUE}
# Y is N by T; X is K by T

p = 4                                   # set a number of lags included
N = ncol(df)
K = 1 + N*p

Y = t(df[(p+1):nrow(df),])
X = matrix(1,1,ncol(Y))

for (i in 1:p){
  X    = rbind(X,t(df[((p+1):nrow(df))-i,]))
}

mydata = list(p=p,N=N,K=K,Y=Y,X=X)
```

```{r : Step 2 - Compute priors and posteriors, echo=TRUE}
priors     = prior(parameters, mydata)
posteriors = posterior(priors, mydata)
```

```{r : Step 3 - Impose exclusion restrictions, echo=TRUE}
B0Vlist       = ltexclusion(mydata)
```

```{r : Step 4 - Estimate and sample B0 and B+; save data, eval=FALSE, include=TRUE}
Bposteriors           = posteriorSimulations(parameters, posteriors, B0Vlist, mydata$N)
save(Bposteriors, priors, posteriors, file = "data-posteriors.RData")
```

```{r : Step 4b - load saved data posteriors, eval=TRUE}
load(file = "data-posteriors.RData")
```


```{r : Step 5 - Compute posterior means for B0 and B+, echo=TRUE, results='asis'}
Bposterior.means = posteriorMeans(Bposteriors)
data_B0 = pmatrix(Bposterior.means$B0)
```

```{r : Step 5b - Compute the posterior means of Bp for actual data, echo=TRUE, results='asis'}
data_Bp = pmatrix(Bposterior.means$Bp)
```

## Extended Model
In the extended model, I will estimate the hyperparameters rather than setting them exogenously. Such estimation procedure often improves the fit of the model especially because the results can be sensitive to the parameterisation of the hyperparameters. 
In particular, I estimate $(\kappa_0, \kappa_+)$ such that $\underline S = \kappa_0 I_N$ and $\underline \Omega = \kappa_+ I_K$.

I postulate the following prior distributions for the hyperparameters:
$$
\begin{align*}
    \kappa_0 | \underline s_{\kappa_0}, \underline \nu_{\kappa_0} \sim \mathcal{IG}2(\underline s_{\kappa_0}, \underline \nu_{\kappa_0})  && \kappa_+ | \underline s_{\kappa_+}, \underline \nu_{\kappa_+} \sim \mathcal{G}(2 \underline s_{\kappa_+}, \frac{1}{2} \underline \nu_{\kappa_+}) 
  \end{align*}
$$


```{r : hyperparameter priors, echo=TRUE}
ext.priors = function(parameters,usedata){
  ext.prior = list(
  kappa0.s = .1,
  kappa0.nu = 1,
  kappap.s = .1,
  kappap.nu = 1,
  B       = cbind(rep(0,usedata$N), diag(usedata$N), matrix(0, usedata$N, (usedata$p-1)*usedata$N)), # random walk prior
  Omega   = parameters$kappa2 * diag(usedata$K),
  S       = parameters$kappa3*diag(usedata$N),
  nu      = usedata$N
)
}
```


Moreover, we have 
$$
  \begin{align*}
    p(B_{+n}|b_n, \kappa_+) = \mathcal{N}_k (b_n V_n B, \kappa_+ \Omega) && p(b_n| \kappa_0) = \mathcal{N}_{r_n}(0, \kappa_0 S)
  \end{align*}
$$
  Thus, posteriors
  $$
\begin{align*}
    & p(\kappa_0 | Y, X, B_0) \propto p(B_0|\kappa_0) p(\kappa_0 | \underline s_{\kappa_0}, \underline \nu_{\kappa_0} )\\
    & \propto \prod_{n=1}^{N}\left(\kappa_0^{-\frac{1}{2}}\right)^{r_n} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N b_n V_n (\kappa_0 I_N)^{-1} V_n' b_n'  \right\} \cdot \kappa_0^{-\frac{\underline \nu_{\kappa_0}+2}{2}} \exp \left\{  -\frac{\underline s_{\kappa_0}}{2 \kappa_0} \right\}\\ 
    & \propto \kappa_0^{ -\frac{\underline \nu_{\kappa_0} + 2 + \sum_{n=1}^{N}r_n}{2}} \cdot \exp \left\{  -\frac{1}{2 \kappa_0} \sum_{n=1}^N b_n V_n V_n' b_n' + \underline s_{\kappa_0} \right\}\\
  \end{align*}
  $$
  This gives
  $$ \bar s_{\kappa_0} =  \sum_{n=1}^N b_n V_n V_n' b_n' + \underline s_{\kappa_0}. $$
  $$ \bar \nu_{\kappa_0} = \underline \nu_{\kappa_0} +\sum_{n=1}^{N}r_n $$
  Also,
  $$
  \begin{align*}
    & p(\kappa_+ | Y, X, B_+, B_0, \kappa_0) \propto p(B_+|\kappa_+, B_0, \kappa_0) p(\kappa_+ | \underline s_{\kappa_+}, \underline \nu_{\kappa_+} )\\
    & \propto \kappa_+^{-\frac{KN}{2}} \exp \left\{  -\frac{1}{2} \sum_{n=1}^N (B_{+n} - b_n V_n \underline B) (\kappa_+ I_{K})^{-1} (B_{+n} - b_n V_n \underline B)'  \right\} \cdot \kappa_+^{-\frac{\underline \nu_{\kappa_+} + 2}{2}} \exp \left\{  -\frac{ \kappa_+}{2 \underline s_{\kappa_+}} \right\}\\
    & = \kappa_+^{-\frac{\underline \nu_{\kappa_+} + KN}{2} - 1} \cdot \exp \left\{  -\frac{1}{2} \left( (B_{+n} - b_n V_n \underline B)  (B_{+n} - b_n V_n \underline B)' \cdot \frac{1}{\kappa_+} + \frac{1}{\underline s_{\kappa_+}} \kappa_+  \right) \right\}\\
  \end{align*}
  $$
  This gives
  $$ \lambda = -\frac{\underline \nu_{\kappa_+} + KN}{2} $$
  $$ \chi =  \sum_{n=1}^N  (B_{+n} - b_n V_n \underline B)  (B_{+n} - b_n V_n \underline B)' $$
  $$  \Psi = \frac{1}{\underline s_{\kappa_+}} $$
  
  A structure function is written that creates matrices to store draws of $\{\kappa_0^{(s)}, \kappa_+^{(s)}, B_0^{(s)}, B_+^{(s)}\}_{s =1}^{S}$.
```{r : Structures, echo=TRUE}
  init.struct = function(usedata,S){
    kappa0 = array(NA,c(1,S))
    kappa0[1] = 10
    kappap = rep(NA, S)
    kappap[1] = 10
    B0.post = array(NA, c(usedata$N,usedata$N,S))
    Bp.post = array(NA, c(usedata$N,usedata$K,S))
    list(kappa0 = kappa0, kappap = kappap, B0.post = B0.post, Bp.post = Bp.post)
  }
```

The sampling function is given below.

```{r : Sampling, echo=TRUE}
ext.sampling = function(parameters, struct, priors, usedata){
  B0Vlist.initial = ltexclusion(usedata)
  B0.initial = B0Vlist.initial$B0
  for (i in 1:(parameters$S + parameters$S.burnin)){
    
    # Computing posterior parameters for each draw
    Omega.inv      = solve(struct$kappap[i] * priors$Omega)
    Omega.post.inv = usedata$X%*%t(usedata$X) + Omega.inv
    Omega.post     = solve(Omega.post.inv)
    B.post         = (usedata$Y%*%t(usedata$X) + priors$B%*%Omega.inv) %*% Omega.post
    S.post         = solve(usedata$Y%*%t(usedata$Y) + solve(struct$kappa0[i] * priors$S) + priors$B%*%Omega.inv%*%t(priors$B) - B.post%*%Omega.post.inv%*%t(B.post) )
    nu.post        = ncol(usedata$Y) + priors$nu


  if (i > 1){
    B0.initial = struct$B0.post[,,i-1]
  }
  
  B0.i = rgn(n=1, S.inv = solve(S.post), nu = nu.post, V = B0Vlist.initial$V, B0.initial = B0.initial)
  B0.hat = t(chol((nu.post - usedata$N)*S.post))
  B0.norm.i = normalize.Gibbs.output.parallel(B0.i, B0.hat)
  Bp.i = rnorm.ngn(B0.norm.i, B.post, Omega.post)
  
  struct$B0.post[,,i] = B0.norm.i
  struct$Bp.post[,,i] = Bp.i
  
  # Now, update kappa
  kappa0.nu.post = priors$kappa0.nu + (usedata$N/2)
  kappap.lambda.post = -(priors$kappap.nu + usedata$K * usedata$N)/2
  kappap.psi.post = 1/priors$kappap.s
  kappa0.s.post = priors$kappa0.s
  # kappap.chi.post = 0
  for (n in 1:usedata$N){
    # kappa0.s.post = kappa0.s.post + B0.norm.i[n,,1] %*% t( B0.norm.i[n,,1])
    kappa0.s.post = kappa0.s.post + sum(B0.norm.i[n,,1]^2)
    kappap.chi.post = (Bp.i[n,,1] - B0.norm.i[n,,1] %*% B.post) %*% t(Bp.i[n,,1] - B0.norm.i[n,,1] %*% B.post)
  }
  
  if (i != (parameters$S + parameters$S.burnin)){
    struct$kappa0[i+1] = kappa0.s.post / rchisq(n=1,df = kappa0.nu.post)
    struct$kappap[i+1] = GIGrvg::rgig(n=1, kappap.lambda.post, kappap.chi.post, kappap.psi.post)
  }
  }
  struct$kappa0 = struct$kappa0[(parameters$S.burnin+1):(parameters$S.burnin + parameters$S)]
  struct$kappap = struct$kappap[(parameters$S.burnin+1):(parameters$S.burnin + parameters$S)]
  struct$B0.post = struct$B0.post[,,(parameters$S.burnin+1):(parameters$S.burnin + parameters$S)]
  struct$Bp.post = struct$Bp.post[,,(parameters$S.burnin+1):(parameters$S.burnin + parameters$S)]
  return(struct)
  
}

```

```{r : function to compute struct posterior means, echo=TRUE}
structPosteriorMeans = function(struct){
  struct.means = list(
  kappa0 = mean(struct$kappa0),
  kappap = mean(struct$kappap),
  B0 = rowMeans(struct$B0.post, dims = 2),
  Bp = rowMeans(struct$Bp.post, dims = 2)
  )
}
```

The following code computes the prior, initialises matrices to store results, and samples the draws for the simulated data.
```{r : Running extension for simulated data, eval = FALSE, include=TRUE}
ext.sim.prior = ext.priors(parameters, artificialdata)
ext.sim.struct = init.struct(artificialdata, parameters$S + parameters$S.burnin)
ext.sim.struct <- ext.sampling(parameters, ext.sim.struct, ext.sim.prior, artificialdata)
```

```{r : save simulation struct, eval=FALSE}
save(ext.sim.struct, file = "ext.sim.struct.RData")
```

```{r : load simulation struct}
load(file = "ext.sim.struct.RData")
```

```{r : compute the simulated struct posterior means for the data, echo=TRUE}
ext.sim.struct.means = structPosteriorMeans(ext.sim.struct)
```

```{r : display in latex mode the simulated posterior means matrices, results='asis', echo=TRUE}
ext.sim.data_B0 = pmatrix(ext.sim.struct.means$B0)
```
```{r, results='asis', echo=TRUE}
ext.sim.data_Bp = pmatrix(ext.sim.struct.means$Bp)

```

```{r, results='asis', echo=TRUE}
ext.sim.data_kappa0 = pmatrix(ext.sim.struct.means$kappa0)
```

```{r, results='asis', echo=TRUE}
ext.sim.data_kappap = pmatrix(ext.sim.struct.means$kappap)

```


The following code computes the prior, initialises matrices to store results, and samples the draws for the actual data.
```{r : Running extension for actual data, eval = FALSE, include=TRUE}
ext.prior = ext.priors(parameters, mydata)
ext.struct = init.struct(mydata, parameters$S + parameters$S.burnin)
ext.struct <- ext.sampling(parameters, ext.struct, ext.prior, mydata)
```

```{r : save struct, eval=FALSE}
save(ext.struct, file = "ext.struct.RData")
```

```{r : load struct}
load(file = "ext.struct.RData")
```




```{r : compute the struct posterior means for the data, echo=TRUE}
ext.struct.means = structPosteriorMeans(ext.struct)
```

```{r : display in latex mode the posterior means matrices, results='asis', echo=TRUE}
ext.data_B0 = pmatrix(ext.struct.means$B0)

```

```{r, results='asis', echo=TRUE}
ext.data_Bp = pmatrix(ext.struct.means$Bp)
```

```{r, results='asis', echo=TRUE}
ext.data_kappa0 = pmatrix(ext.struct.means$kappa0)
```

```{r, results='asis', echo=TRUE}
ext.data_kappap = pmatrix(ext.struct.means$kappap)
```


# Empirical Investigation


# Appendix

# References {.unnumbered}



