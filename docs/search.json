[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Estimating the impact of monetary policy shocks on different housing indicators: An SVAR Approach",
    "section": "",
    "text": "Abstract. <under construction!>\nKeywords. bsvars, impulse responses, quarto, R, housing price index, monetary policy shocks"
  },
  {
    "objectID": "index.html#empirical-project-setup",
    "href": "index.html#empirical-project-setup",
    "title": "Estimating the impact of monetary policy shocks on different housing indicators: An SVAR Approach",
    "section": "Empirical Project Setup",
    "text": "Empirical Project Setup\nThis project website is being developed as a Quarto document and the empirical work in conducted using R. The necessary datasets are imported from the Reserve Bank of Australia (RBA) and the Australian Bureau of Statistics (ABS) websites using readrba and readabs respectively."
  },
  {
    "objectID": "index.html#choice-of-variables",
    "href": "index.html#choice-of-variables",
    "title": "Estimating the impact of monetary policy shocks on different housing indicators: An SVAR Approach",
    "section": "Choice of variables",
    "text": "Choice of variables\nI use the following variables to answer this question. I discuss the relevance of each variable.\n\n\\(\\log(M1)\\): represents the log of the money supply M1. Both conventional and unconventional monetary policy shocks can change the stock of money supply and its size affects real variables of the economy.\n\\(\\Delta CPI\\): represents the year-on-year change in the Consumer Price Index (CPI). It is a measure of inflation in an economy and is affected by monetary policy shocks.\n\\(\\log(c)\\): represents the log of consumption of the economy. Monetary policy shocks can alter people’s consumption-savings behavior.\n\\(\\log(GDP)\\): represents the log of the Gross Domestic Product (GDP). Including this along with the consumption helps differentiate the effect on the non-consumption aspect of the economy.\n\\(loanrate\\): represents the weighted average interest rates on owner-occupied home loans.\n\\(AUCR\\): represents the Australian Cash Rate Target. This is the major monetary policy instrument available to the RBA.\n\\(USFFR\\): represents the Federal Funds Rate Maximum Target Rate. Monetary policy adopted in the US tend to ripple into other economies so this is a variable of interest. Another extension to this variable would be to include the Target rates of Australia’s largest trading partners.\n\\(nhouses\\): represents the number of new private dwellings (houses) approved for construction in Australia. Impact on housing prices might be dampened by the supply elasticity of housing captured by this variable.\n\\(PPI\\): represents the Property Price Index in Australia. The index is normalized with respect to the property prices in 2011-2012."
  },
  {
    "objectID": "index.html#data-properties",
    "href": "index.html#data-properties",
    "title": "Estimating the impact of monetary policy shocks on different housing indicators: An SVAR Approach",
    "section": "Data Properties",
    "text": "Data Properties\nThe variables discussed above are illustrated in the figure below. Note that the logged variables trend upwards because they are expressed in their levels, while variables expressed in percentage change terms do not exhibit this behavior.\nThe dataset will be used in the sample consists quarterly data from 2003 Q3 to 2021 Q4, including 74 observations, plots of truncated dataset is shown as:\n\nvar_names <- colnames(df)\ndate_range <- as.yearqtr(rownames(df), format = \"%Y Q%q\")\npar(mfrow = c(3,3), mar=c(2,2,2,2))\nfor (j in 1:ncol(df)){\n  plot(x = date_range, y = df[,j],,type='l',\n       main = paste(var_names[j]), ylab = \"\", xlab = \"\",\n       lwd = 2.5,\n       ylim = c(min(df[,j]),max(df[,j])))\n}\n\n\n\n\n\nADF Tests\nNext, I perform and display ADF test results on the variables. I report, for each variable, the difference level at which the ADF tests rejects the null that the series is non-stationary.\n\nperform_adf_tests <- function(df) {\n  # Create an empty dataframe to store the results\n  results <- data.frame(Variable = character(), TestType = character(), \n                        TestStatistic = numeric(), PValue = numeric(), \n                        stringsAsFactors = FALSE)\n\n  # Iterate over each column in the dataframe\n  for (col in colnames(df)) {\n    # Remove NA values from the column\n    column_data <- na.omit(df[[col]])\n\n    # Perform ADF test for levels\n    adf_levels <- tseries::adf.test(na.omit(column_data), k = 4)\n\n    # Check if p-value is less than or equal to 0.05\n    if (adf_levels$p.value <= 0.05) {\n      results <- bind_rows(results,\n        data.frame(Variable = col, TestType = \"Levels\", \n                   TestStatistic = adf_levels$statistic,\n                   PValue = adf_levels$p.value)\n      )\n    } else {\n      # Perform ADF test for first difference\n      adf_diff1 <- tseries::adf.test(na.omit(diff(column_data)), k = 4)\n      \n      # Check if p-value is less than 0.05\n      if (adf_diff1$p.value < 0.05) {\n        results <- bind_rows(results,\n          data.frame(Variable = col, TestType = \"First Difference\", \n                     TestStatistic = adf_diff1$statistic,\n                     PValue = adf_diff1$p.value)\n        )\n      } else {\n        # Perform ADF test for second difference\n        adf_diff2 <- tseries::adf.test(na.omit(diff(column_data, differences = 2)), k = 4)\n        \n        results <- bind_rows(results,\n            data.frame(Variable = col, TestType = \"Second Difference\", \n                       TestStatistic = adf_diff2$statistic,\n                       PValue = adf_diff2$p.value)\n          )\n      }\n    }\n  }\n\n\n  # Return the results dataframe\n  return(results)\n}\n\nadf_test_results <- perform_adf_tests(df)\nrmarkdown::paged_table(adf_test_results)\n\n\n\n  \n\n\n\n\n\nACF Plots\n\n\n\n\n\nACF Plots for our data\n\n\n\n\n\n\nPACF Plots\n\n\n\n\n\nPACF Plots for our data"
  },
  {
    "objectID": "index.html#basic-model",
    "href": "index.html#basic-model",
    "title": "Estimating the impact of monetary policy shocks on different housing indicators: An SVAR Approach",
    "section": "Basic Model",
    "text": "Basic Model\n\nIdentification\nI plan to use exclusion-restrictions to identify the structural matrix \\(B_0\\). In particular, I will employ the solution concept in D. Waggoner and Zha (2003) who use a normalization rule as an optimal solution to the local identification problem. I then employ the Gibbs sampler for a SVAR model with exclusion restrictions as in D. F. Waggoner and Zha (2003).\n\\[ B_0 Y = B_+ X + U, \\qquad \\qquad U|X \\sim \\mathcal{MN}_{N \\times T}(\\textbf{0}_{N \\times T}, I_T, I_N) \\] where\n\\(B_0\\) is a \\(N \\times N\\) contemporaneous effects matrix.\n\\(Y = [y_1, \\dots, y_T]\\) is a \\(N \\times T\\) matrix of observations.\n\\(B_+ = [B_d, B_1, \\dots, B_p]\\) is a \\(N \\times K\\) matrix of autoregressive parameters, where \\(K = Np + d\\) (\\(d\\) is the number of deterministic terms; \\(p\\) is the number of lags).\n\\(X = [x_1, \\dots, x_T]\\) is a \\(K \\times T\\) matrix of lagged observations where each \\(x_t = (1, y_{t-1}, \\dots, y_{t-p})'\\).\n\\(U = [u_1, \\dots, u_T]\\) is a \\(N \\times T\\) matrix of structural shocks.\nFor convenience of coding and inference purposes, we consider a row-wise equation form as follows: \\[ B_{0[n.\\cdot]} Y = B_{+n} X + U_n, \\qquad \\qquad U_n|X \\sim \\mathcal{N}(\\mathbf{0}_T, I_T) \\]\nIf \\(r_n\\) denotes the number of elements in the \\(n^{th}\\) row of \\(B_0\\) that stay unrestricted, then we can further decompose \\(B_{0[n.\\cdot]}\\) into \\(b_n\\) and \\(V_n\\).\n\\(b_n\\) is a \\(1 \\times r_n\\) vector of unrestricted elements in the \\(n^{th}\\) row of \\(B_0\\).\n\\(V_n\\) is a \\(r_n \\times N\\) matrix which places elements of \\(b_n\\) in the appropriate positions to impose the restrictions on \\(B_0\\).\nThen, the row-wise equation form can be written as follows: \\[ b_n V_n Y = B_{+n} X + U_n, \\qquad \\qquad U_n|X \\sim \\mathcal{N}(\\mathbf{0}_T, I_T) \\] Following D. F. Waggoner and Zha (2003) and Arias, Rubio‐Ramírez, and Waggoner (2018), we define that \\((B_+, B_0)\\) follow jointly a Normal-Generalised Normal (NGN) distribution denoted as \\[ p(B_+, B_0) \\sim \\mathcal{NGN}(B, \\Omega, S, \\nu)\\]\nif \\(B_{+n}\\) follows a K-variate normal distribution given \\(b_n\\) \\[ p(B_{+n}|b_n) = \\mathcal{N}_k(b_nV_nB, \\Omega) \\] with kernel \\[ p(B_{+n}|b_n) \\propto \\exp \\left\\{  -\\frac{1}{2} \\left( B_{+n} - b_nV_nB \\right) \\Omega^{-1}  \\left( B_{+n} - b_nV_nB \\right)' \\right\\} \\]\nfor \\(n = 1, \\dots, N\\) and \\(b_1, \\dots, b_N\\) jointly have a distribution whose kernel is specified by \\[ p(b_1, \\dots, b_N) \\propto | \\det(B_0) |^{\\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n S^{-1} V_n' b_n'  \\right\\} \\]\nThe joint-distribution of \\((B_+, B_0)\\) can then be written as \\[ p(B_0, B_+) = \\left( \\prod_{n=1}^N p(B_{+n}|b_n)\\right) p(b_1, \\dots, b_N) \\]\n\nltexclusion = function(usedata){\n  BM.V        = vector(\"list\",usedata$N)\nfor (n in 1:usedata$N){\n  BM.V[[n]]   = cbind(diag(n),matrix(0,n,usedata$N-n))\n}\n\nB0.initial    = matrix(0,usedata$N,usedata$N)\nfor (n in 1:usedata$N){\n  unrestricted               = apply(BM.V[[n]],2,sum)==1\n  B0.initial[n,unrestricted] = rnorm(sum(unrestricted))\n}\nB0Vlist       = list(B0.initial = B0.initial, V = BM.V)\n}\n\n\n\nPrior distribution\nGiven this parameterisation, we can write down the kernel of the prior given hyperparameters \\((\\underline B, \\underline \\Omega, \\underline S, \\underline \\nu)\\) as follows: \\[ | \\det(B_0) |^{\\underline \\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n \\underline S^{-1} V_n' b_n'  \\right\\}  \\exp \\left\\{  -\\frac{1}{2}  \\sum_{n=1}^N  \\left( B_{+n} - b_nV_n \\underline B \\right) \\underline \\Omega^{-1}  \\left( B_{+n} - b_nV_n \\underline B \\right)' \\right\\}  \\] This prior distribution has two key advantages. Firstly, it leads to a full-conditional posterior distributions that allow efficient sampling. This allows us to estimate the structural parameters of the SVAR model.\nSecondly, it belongs to a class of reference prior distributions that are invariant to the pre-multiplication of the parameter matrices by a rotation matrix up to which the system is identified (see Rubio-Ramirez, Waggoner, and Zha (2010)). This allows us to conduct a proper Bayesian treatment of this model given the identification above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalibration of the prior\n\n\\(\\underline \\nu = N\\) is a commonly chosen value as it implies that the generalised-normal part is equivalent to a \\(r_n\\)-variate normal with the mean equal to a vector of zeros and the covariance matrix equal to \\(\\underline S\\).\n\\(\\underline S = \\kappa_3 I_N\\) implies that the covariances across the rows of \\(B_0\\) is zero, and the variance of each row is homoskedastic (constant). \\(\\kappa_3\\) can be interpreted as a contemporaneous effects shrinkage and is set to 10.\n\\(\\underline B = [0_{N \\times 1} \\; \\kappa_4 I_N \\; 0_{N \\times (p-1)N}]\\) implies an AR1 process for the structural VAR at the prior mean. In this calibration, \\(\\kappa_4 = 1\\), the AR1 process is a random walk process.\n\\(\\underline \\Omega = \\begin{pmatrix} \\kappa_2 & 0\\\\ 0 & \\kappa_1 I_{Np} \\end{pmatrix}\\) is the prior covariance matrix. It is taken to be a diagonal matrix with the diagonal elements set as the Litterman prior. \\(\\kappa_2\\) represents the constant term shrinkage and is set to 10. \\(\\kappa_1\\) represents the autoregressive slope shrinkage and is set to 0.1.\n\n\n# A function that computes and stores all the prior distribution components given a parameter list input\nprior     = function(parameters, usedata){\n  priors  = list(\n  B       = cbind(rep(0,usedata$N), parameters$kappa4*diag(usedata$N), matrix(0, usedata$N, (usedata$p-1)*usedata$N)), # random walk prior\n  Omega   = diag(c(parameters$kappa2,parameters$kappa1*((1:usedata$p)^(-2))%x%rep(1,usedata$N))),\n  # Omega = diag(c(parameters$kappa2,parameters$kappa1*rep(1,usedata$N*usedata$p))),\n  S       = parameters$kappa3*diag(usedata$N),\n  nu      = usedata$N\n  )\n}\n\n\n# set the priors\n\nparameters = list(\n  kappa1    = .1,       # autoregressive slope shrinkage\n  kappa2    = 10,      # constant term shrinkage\n  kappa3    = 10,      # contemporaneous effects shrinkage\n  kappa4    = 1,       # VAR prior persistence\n  S         = 5000,\n  S.burnin  = 100\n)\n\nWe also calibrate the number of draws \\(S = 5000\\) for any sampling, while the \\(S.burnin = 100\\) represents the number of draws that are sampled first and then discarded.\n\n\n\nLikelihood Function\nThe conditional normality of the error term allows us to write the kernel of the likelihood function and show that it can be expressed as a NGN distribution. \\[\n\\begin{align*}\n    &L(B_+, B_0|Y,X) \\propto | \\det(B_0^{-1}B_0^{-1'})|^{-\\frac{T}{2}} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N \\left(b_n V_n Y - B_{+n} X \\right) \\left( b_n V_n Y - B_{+n} X  \\right)' \\right\\}\\\\\n    & = | \\det(B_0)|^{T} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N \\left( b_n V_n Y Y' V_n' b_n' - 2 b_n V_n Y X' B_{+n}' + B_{+n} X X' B_{+n}' \\right) \\right\\}\\\\\n    & = | \\det(B_0)|^{T} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N \\left( b_n V_n Y Y' V_n' b_n' + B_{+n} X X' B_{+n}' - 2 b_n V_n Y X' (XX')^{-1} (XX') B_{+n}' \\right. \\right. \\\\\n    & \\left. \\left. + b_n V_n Y X' (XX')^{-1} (XX') (XX')^{-1} XY'V_n'b_n' - b_n V_n Y X' (XX')^{-1} (XX') (XX')^{-1} XY'V_n'b_n' \\right) \\right\\}\\\\\n    & = | \\det(B_0)|^{T} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N \\left( b_n V_n [ YY' - YX'(XX')^{-1}XY'] V_n' b_n'  + B_{+n} X X' B_{+n}' \\right. \\right. \\\\\n    & \\left. \\left. - 2 b_n V_n Y X' (XX')^{-1} (XX') B_{+n}' + b_n V_n Y X' (XX')^{-1} XY' V_n' b_n' \\right) \\right\\}\\\\\n    & \\text{}\\\\\n    & \\text{Let $\\hat A = YX' (XX')^{-1} $, then we can simplify}\\\\\n    & \\text{}\\\\\n    & =  | \\det(B_0)|^{T} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N \\left( b_n V_n [ YY' - \\hat A XY'] V_n' b_n'  + B_{+n} X X' B_{+n}' - 2 b_n V_n \\hat A (XX') B_{+n}' \\right. \\right.\\\\ & \\left. \\left. + b_n V_n \\hat A XY' V_n' b_n' \\right) \\right\\}\\\\\n    & =  | \\det(B_0)|^{T} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N \\left( b_n V_n [ YY' - \\hat A XY'] V_n' b_n'  + (B_{+n} - b_n V_n \\hat A) X X' (B_{+n} - b_n V_n \\hat A)' \\right) \\right\\}\\\\\n    & =  | \\det(B_0)|^{T} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n [ YY' - \\hat A XY'] V_n' b_n' \\right\\} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N (B_{+n} - b_n V_n \\hat A) X X' (B_{+n} - b_n V_n \\hat A)' \\right\\}\n\\end{align*}\n\\]\nComparing this with the general NGN kernel, we can write that\n\\[ L(B_+, B_0|Y, X) = \\mathcal{NGN}(\\tilde B, \\tilde \\Omega, \\tilde S, \\tilde \\nu) \\] where\n\\[ \\tilde B = \\hat A, \\quad \\tilde \\Omega = (XX')^{-1}, \\quad \\tilde S = ( YY' - \\hat A XY')^{-1}, \\quad \\tilde \\nu = T + N. \\] Hence, we have shown that the likelihood function follows a NGN distribution.\n\n\nPosterior Distribution\nThe prior and the likelihood can be used to obtain the posterior as follows:\n\\[\n\\begin{align*}\n    & p(B_+, B_0|Y, X)  \\propto L(B_+, B_0|Y, X) p(B_0, B_+)\\\\\n    & = | \\det(B_0)|^{T} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N \\left(b_n V_n Y - B_{+n} X \\right) \\left( b_n V_n Y - B_{+n} X  \\right)' \\right\\}\\\\\n    & \\times | \\det(B_0) |^{\\underline \\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n \\underline S^{-1} V_n' b_n'  \\right\\}  \\exp \\left\\{  -\\frac{1}{2}  \\sum_{n=1}^N  \\left( B_{+n} - b_nV_n \\underline B \\right) \\underline \\Omega^{-1}  \\left( B_{+n} - b_nV_n \\underline B \\right)' \\right\\} \\\\\n    & =  | \\det(B_0) |^{T + \\underline \\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N \\left(b_n V_n Y Y' V_n' b_n' - 2 b_n V_n Y X' B_{+n}' + B_{+n} X X' B_{+n}' \\right) \\right.\\\\\n    & \\left. + b_n V_n \\underline S^{-1} V_n' b_n' + B_{+n} \\underline \\Omega^{-1} B_{+n}' - 2 b_n V_n \\underline B \\underline \\Omega^{-1} B_{+n}' + b_n V_n \\underline B \\underline \\Omega^{-1} \\underline B' V_n' b_n' \\right\\}\\\\\n    & =  | \\det(B_0) |^{T + \\underline \\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n [ YY' + \\underline S^{-1} + \\underline B \\underline \\Omega^{-1} \\underline B'] V_n' b_n' - 2 b_n V_n [ YX' + \\underline B \\underline \\Omega^{-1} ] B_{+n}' \\right.\\\\\n    & \\left. + B_{+n} [ XX' + \\underline \\Omega^{-1} ] B_{+n}' \\right\\}\\\\ & \\text{}\\\\\n    & \\text{ Let $ \\bar \\Omega = (XX' + \\underline \\Omega^{-1})^{-1} $, then we can write}\\\\ & \\text{}\\\\\n    & =  | \\det(B_0) |^{T + \\underline \\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n [ YY' + \\underline S^{-1} + \\underline B \\underline \\Omega^{-1} \\underline B'] V_n' b_n' - 2 b_n V_n [ YX' + \\underline B \\underline \\Omega^{-1} ] \\bar \\Omega \\bar \\Omega^{-1} B_{+n}' \\right.\\\\\n    & \\left. + B_{+n} \\bar \\Omega^{-1} B_{+n}' \\right\\}\\\\\n    & \\text{}\\\\\n    & \\text{ Let $ \\bar B = (YX' + \\underline B \\underline \\Omega^{-1}) \\bar \\Omega $, then we can write}\\\\ & \\text{}\\\\\n    & =  | \\det(B_0) |^{T + \\underline \\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n [ YY' + \\underline S^{-1} + \\underline B \\underline \\Omega^{-1} \\underline B' - \\bar B \\bar \\Omega^{-1} \\bar B' ] V_n' b_n'  \\right.\\\\\n    & \\left.  + b_n V_n  \\bar B \\bar \\Omega^{-1} \\bar B' V_n' b_n' - 2 b_n V_n \\bar B \\bar \\Omega^{-1} B_{+n}' + B_{+n} \\bar \\Omega^{-1} B_{+n}' \\right\\}\\\\\n    & \\text{}\\\\\n    & \\text{ Define $ \\bar S = (YY' + \\underline S^{-1} + \\underline B \\underline \\Omega^{-1} \\underline B' - \\bar B \\bar \\Omega^{-1} \\bar B')^{-1} $, then we can write}\\\\ & \\text{}\\\\\n    & =  | \\det(B_0) |^{T + \\underline \\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n \\bar S^{-1} V_n' b_n'  + (B_{+n} - b_n V_n \\bar B) \\bar \\Omega^{-1} (B_{+n} - b_n V_n \\bar B)' \\right\\}\\\\\n    &  = | \\det(B_0) |^{T + \\underline \\nu - N} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n \\bar S^{-1} V_n' b_n'  \\right\\} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N (B_{+n} - b_n V_n \\bar B) \\bar \\Omega^{-1} (B_{+n} - b_n V_n \\bar B)' \\right\\}\n\\end{align*}\n\\] Thus, \\[ p(B_+, B_0|Y,X) \\sim \\mathcal{NGN}(\\bar B, \\bar \\Omega, \\bar S, \\bar \\nu) \\] where the first three parameters are defined above and \\(\\bar \\nu = T + \\underline \\nu\\).\nThe following R function uses the prior and information contained in data to compute and store (as a list) the set of posterior parameters for our model.\n\nposterior     = function(priors, usedata){\n  Omega.inv   = solve(priors$Omega)\n  Omega.post.inv = usedata$X%*%t(usedata$X) + Omega.inv\n  Omega.post  = solve( Omega.post.inv )\n  B.post      = (usedata$Y%*%t(usedata$X) + priors$B%*%Omega.inv) %*% Omega.post\n  S.post      = solve(usedata$Y%*%t(usedata$Y) + solve(priors$S) + priors$B%*%Omega.inv%*%t(priors$B) - B.post%*%Omega.post.inv%*%t(B.post) )\n  nu.post     = ncol(usedata$Y) + priors$nu\n\n  posteriors  = list(\n  B           = B.post,\n  Omega       = Omega.post,\n  S           = S.post,\n  nu          = nu.post\n)\n}\n\nThe following is the code to sample using the Gibbs sampler. More information on the specifics of this code will be added soon.\n\nposteriorSimulations  = function(parameters, posteriors, B0Vlist, N){\n  t0                  = proc.time()\n  B0.posterior        = rgn(n=parameters$S.burnin, S.inv=solve(posteriors$S), nu=posteriors$nu, V=B0Vlist$V, B0.initial=B0Vlist$B0.initial)\n  t1                  = proc.time()\n  (t1-t0)/60\n  \n  # sampling B0 from the posterior distribution using Gibbs\n  t0                  = proc.time()\n  B0.posterior        = rgn(n=parameters$S, S.inv=solve(posteriors$S), nu=posteriors$nu, V=B0Vlist$V, B0.initial=B0.posterior[,,parameters$S.burnin])\n  t1                  = proc.time()\n  (t1-t0)/60\n  \n  # normalisation\n  B0.hat              = t(chol((posteriors$nu-N)*posteriors$S))                   # normalisation using this B0.hat should work\n  BM.B0.posterior     = normalize.Gibbs.output.parallel(B0.posterior,B0.hat=B0.hat)\n  t2                  = proc.time()\n  (t2-t1)/60\n  \n  # sample B+ from the normal conditional posterior\n  t2                  = proc.time()\n  BM.Bp.posterior     = rnorm.ngn(BM.B0.posterior, B=posteriors$B,Omega=posteriors$Omega)\n  t3                  = proc.time()\n  (t3-t2)/60\n  \n  list(B0.posterior   = BM.B0.posterior, Bp.posterior = BM.Bp.posterior)\n}\n\nThis function computes the sample average of the \\(B_0\\) and \\(B_+\\) matrices obtained from each sampling step.\n\nposteriorMeans = function(Bposteriors){\n  Bposteriors.means = list(\n  B0 = rowMeans(Bposteriors$B0.posterior, dims = 2),\n  Bp = rowMeans(Bposteriors$Bp.posterior, dims = 2)\n  )\n}\n\n\n\nSimulation Run\nThe following code generates artificial data containing 1000 observations from a bi-variate Gaussian random walk process with the covariance matrix equal to the identity matrix of order 2.\n\nset.seed(12345)\n\nsim.p = 1\nsim.T = 1000\nsim.N = 2\nsim.K = 1 + sim.N*sim.p\n\nsim.Y           = arima.sim(list(order = c(0,1,0)), n = sim.T + sim.p-1, mean = 0, sd =1)\nfor (i in 2:sim.N){\n  sim.Y         = rbind(sim.Y, arima.sim(list(order = c(0,1,0)), n = sim.T + sim.p-1, mean = 0, sd = 1))\n}\n\nsim.X           = matrix(1,1,sim.T)\nfor (i in 1:sim.p){\n  sim.X         = rbind(sim.X, sim.Y[,(sim.p+1-i):(ncol(sim.Y)-i)])\n}\nsim.Y           = sim.Y[,-sim.p]\nartificialdata  = list(p = sim.p, N = sim.N, K = sim.K, Y = sim.Y, X = sim.X)\n\nWe obtain a list of simulation priors and posteriors.\n\nsim.priors      = prior(parameters, artificialdata)\nsim.posteriors  = posterior(sim.priors, artificialdata)\n\nWe create a list of \\(V_n\\) and \\(b_n\\) corresponding to a lower triangular exclusion restriction on \\(B_0\\).\n\nsim.B0Vlist   = ltexclusion(artificialdata)\n\nWe sample the \\(B_0\\) and \\(B_p\\) posteriors using the Gibbs sampler, and save the data for future use.\n\n\n\n\n\n\nsim.Bposteriors.means = posteriorMeans(sim.Bposteriors)\nsim_B0 = pmatrix(sim.Bposteriors.means$B0)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{cc}\n1.007094 & 0.000000\\\\\n-0.037662 & 1.000047\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\nWe can see that the computed \\(B_0\\) covariance matrix is numerically identical to an identity matrix.\nsim_Bp = pmatrix(sim.Bposteriors.means$Bp)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{ccc}\n0.2276255 & 0.9989406 & -0.0071993\\\\\n-0.1389968 & -0.0461782 & 0.9791025\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\nThe first column of \\(B_+\\) represents the posterior mean of the constant term. The values are small and close to zero. The rest of the \\(B_+\\) matrix represents the autoregressive matrix. Its posterior mean is numerically equal to an identity matrix.\n\n\nData Results\n\n# Y is N by T; X is K by T\n\np = 4                                   # set a number of lags included\nN = ncol(df)\nK = 1 + N*p\n\nY = t(df[(p+1):nrow(df),])\nX = matrix(1,1,ncol(Y))\n\nfor (i in 1:p){\n  X    = rbind(X,t(df[((p+1):nrow(df))-i,]))\n}\n\nmydata = list(p=p,N=N,K=K,Y=Y,X=X)\n\n\npriors     = prior(parameters, mydata)\nposteriors = posterior(priors, mydata)\n\n\nB0Vlist       = ltexclusion(mydata)\n\n\n\n\n\n\n\nBposterior.means = posteriorMeans(Bposteriors)\ndata_B0 = pmatrix(Bposterior.means$B0)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{ccccccccc}\n26.5209926 & 0.0000000 & 0.0000000 & 0.0000000 & 0.0000000 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n-0.5374328 & 24.6876169 & 0.0000000 & 0.0000000 & 0.0000000 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n-1.2931457 & -1.0074455 & 1.6709934 & 0.0000000 & 0.0000000 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n-0.1913064 & -2.4124858 & -0.2667380 & 19.6921427 & 0.0000000 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n2.1214903 & -5.0842174 & -0.4220146 & -0.6941292 & 0.6133518 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n-0.2268185 & -1.2724726 & -0.3823054 & -1.7431733 & 0.0362726 & 3.3990293 & 0.000000 & 0.000000 & 0.000000\\\\\n1.0273698 & 1.5552901 & 0.1657674 & -0.2563067 & -0.1126257 & 0.2247032 & 23.628748 & 0.000000 & 0.000000\\\\\n-0.4252953 & -0.4602249 & -0.4613522 & 1.6786888 & 0.0294126 & 0.1041403 & 2.466223 & 2.954714 & 0.000000\\\\\n-0.8813253 & -0.3287169 & -0.1322126 & -1.0875452 & 0.0552464 & -0.6378490 & 4.236609 & -1.316103 & 4.291628\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\ndata_Bp = pmatrix(Bposterior.means$Bp)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{ccccccccccccccccccccccccccccccccccccc}\n0.0340428 & 26.4896179 & -0.0325373 & 0.1792110 & 0.0520378 & -0.0028583 & 0.0819174 & 0.0177709 & 0.0674953 & 0.0294472 & -0.0101618 & -0.0058082 & -0.0973957 & 0.0106070 & -0.0225830 & -0.0025909 & 0.0061310 & -0.0395809 & -0.0173087 & -0.0036620 & -0.0029495 & -0.0104533 & 0.0035828 & 0.0317121 & -0.0088488 & 0.0036644 & -0.0071598 & -0.0225620 & -0.0000811 & -0.0020692 & -0.0139065 & -0.0016576 & -0.0054319 & -0.0122402 & 0.0011880 & -0.0046199 & -0.0129907\\\\\n0.3505351 & -0.5530934 & 24.6621623 & 0.1737378 & 0.0349701 & -0.0271867 & -0.0046280 & 0.0349589 & 0.0948621 & -0.0005750 & -0.0036165 & -0.0055774 & -0.1532086 & 0.0032311 & 0.0091251 & -0.0157208 & 0.0096917 & -0.0709487 & -0.0128779 & 0.0013160 & -0.0013863 & 0.0329902 & 0.0047803 & 0.0388656 & -0.0077929 & 0.0019608 & -0.0194724 & 0.0028660 & 0.0009274 & 0.0016364 & 0.0129250 & 0.0026069 & -0.0232476 & 0.0029798 & 0.0035397 & -0.0102481 & -0.0007346\\\\\n0.0900588 & -1.3321823 & -1.0641094 & 1.2034858 & 0.0814276 & 0.1007304 & 0.3070387 & 0.0609253 & 0.0027480 & 0.0198187 & -0.0124399 & -0.0124225 & -0.1407357 & 0.0161430 & -0.0687436 & -0.0106382 & 0.0113367 & 0.0521910 & -0.0390513 & -0.0100948 & -0.0107495 & -0.0460217 & 0.0046003 & -0.0402574 & -0.0263258 & 0.0081949 & -0.0222197 & -0.0061575 & -0.0016193 & -0.0017899 & -0.0593698 & 0.0033119 & 0.0069903 & -0.0064554 & 0.0020595 & -0.0097973 & 0.0038234\\\\\n2.0561522 & -0.0398875 & -2.2970114 & -0.5535765 & 19.6499925 & -0.0430596 & -0.0833167 & 0.2274814 & -0.0781761 & -0.3390314 & 0.0449222 & 0.0284435 & -0.1340276 & -0.0410126 & 0.0105190 & -0.0347495 & 0.0543261 & 0.0228791 & -0.0146009 & 0.0195654 & 0.0122875 & 0.0109133 & -0.0220699 & 0.0007843 & 0.0113484 & 0.0188844 & 0.0577696 & 0.0393616 & 0.0146575 & 0.0095542 & 0.0312851 & -0.0072968 & -0.0029383 & 0.0315969 & 0.0067975 & 0.0546476 & 0.0523354\\\\\n1.1158015 & 2.2342188 & -5.0292447 & -0.0997648 & -0.5510027 & 0.9300546 & -0.3144649 & 0.2795512 & 0.0229376 & -0.2070536 & 0.0275820 & 0.0089948 & -0.1261456 & 0.0198464 & -0.2835828 & -0.0119085 & 0.0756439 & -0.0314018 & -0.0186579 & 0.0117532 & 0.0053210 & -0.0182410 & 0.0044770 & -0.1273110 & 0.0191941 & 0.0284722 & 0.0223971 & 0.0180614 & 0.0054618 & 0.0017589 & 0.0282052 & 0.0023123 & 0.0683138 & 0.0198523 & 0.0187741 & 0.0278737 & -0.0041267\\\\\n2.6869292 & -0.1388635 & -1.1482380 & -0.5405255 & -1.6481916 & 0.1265392 & 3.3848625 & 0.0084994 & 0.2050775 & -0.1315692 & 0.0239800 & 0.0269374 & -0.1056105 & 0.0212682 & -0.0452640 & -0.0720393 & 0.0103358 & 0.0946531 & -0.0866265 & 0.0127375 & 0.0117787 & -0.0429706 & 0.0080118 & -0.0673743 & -0.0499789 & 0.0006540 & -0.0854922 & -0.0055585 & 0.0042446 & 0.0040924 & 0.0325500 & 0.0077156 & -0.0058789 & -0.0013247 & 0.0025360 & -0.0556307 & 0.0144149\\\\\n0.4260444 & 1.0799219 & 1.5821679 & 0.0937673 & -0.3217788 & -0.1746123 & 0.0244730 & 23.6740144 & 0.0323321 & 0.0632110 & 0.0157938 & 0.0091316 & 0.0341855 & -0.0065400 & 0.0832633 & 0.0529873 & 0.0163096 & 0.0134649 & -0.0225035 & 0.0052963 & 0.0081632 & 0.0057482 & 0.0020719 & -0.0257149 & -0.0003154 & 0.0063301 & 0.0276718 & 0.0002480 & 0.0042603 & 0.0008592 & 0.0027582 & 0.0004117 & 0.0031358 & 0.0082890 & 0.0057634 & 0.0263093 & -0.0176030\\\\\n4.2900353 & -0.3739046 & -0.3293167 & -0.4406823 & 1.8755479 & -0.0999496 & 0.1474773 & 2.4665294 & 3.1461579 & -0.3040548 & 0.0120602 & 0.0316017 & 0.0302441 & 0.0548978 & 0.1155924 & -0.1300655 & 0.0059807 & -0.0753769 & -0.0506903 & 0.0036160 & 0.0144868 & 0.0569823 & 0.0274657 & 0.0095158 & -0.0424758 & 0.0063754 & -0.0925647 & -0.0317581 & -0.0010524 & 0.0066274 & -0.0074384 & 0.0130924 & -0.0321152 & -0.0267789 & 0.0048749 & -0.1179384 & -0.0244086\\\\\n-0.7960460 & -0.9125268 & -0.3476362 & -0.0276958 & -1.0456242 & 0.1427126 & 0.5513943 & 4.1798807 & -1.1793569 & 3.7503343 & -0.0035111 & -0.0091675 & -0.1751689 & -0.0023499 & -0.0190896 & -0.1519091 & -0.0057513 & 0.0468995 & -0.1608758 & -0.0019535 & -0.0030228 & -0.0815764 & -0.0031975 & -0.0498816 & -0.0710858 & -0.0029451 & 0.0769254 & -0.0822382 & -0.0009120 & -0.0028835 & -0.0221159 & -0.0042742 & -0.0354018 & -0.0481825 & -0.0040018 & -0.0068786 & -0.0256362\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]"
  },
  {
    "objectID": "index.html#extended-model",
    "href": "index.html#extended-model",
    "title": "Estimating the impact of monetary policy shocks on different housing indicators: An SVAR Approach",
    "section": "Extended Model",
    "text": "Extended Model\nIn the extended model, I will estimate the hyperparameters rather than setting them exogenously. Such estimation procedure often improves the fit of the model especially because the results can be sensitive to the parameterisation of the hyperparameters. In particular, I estimate \\((\\kappa_0, \\kappa_+)\\) such that \\(\\underline S = \\kappa_0 I_N\\) and \\(\\underline \\Omega = \\kappa_+ I_K\\).\nI postulate the following prior distributions for the hyperparameters: \\[\n\\begin{align*}\n    \\kappa_0 | \\underline s_{\\kappa_0}, \\underline \\nu_{\\kappa_0} \\sim \\mathcal{IG}2(\\underline s_{\\kappa_0}, \\underline \\nu_{\\kappa_0})  && \\kappa_+ | \\underline s_{\\kappa_+}, \\underline \\nu_{\\kappa_+} \\sim \\mathcal{G}(2 \\underline s_{\\kappa_+}, \\frac{1}{2} \\underline \\nu_{\\kappa_+})\n  \\end{align*}\n\\]\n\next.priors = function(parameters,usedata){\n  ext.prior = list(\n  kappa0.s = .1,\n  kappa0.nu = 1,\n  kappap.s = .1,\n  kappap.nu = 1,\n  B       = cbind(rep(0,usedata$N), diag(usedata$N), matrix(0, usedata$N, (usedata$p-1)*usedata$N)), # random walk prior\n  Omega   = parameters$kappa2 * diag(usedata$K),\n  S       = parameters$kappa3*diag(usedata$N),\n  nu      = usedata$N\n)\n}\n\nMoreover, we have \\[\n  \\begin{align*}\n    p(B_{+n}|b_n, \\kappa_+) = \\mathcal{N}_k (b_n V_n B, \\kappa_+ \\Omega) && p(b_n| \\kappa_0) = \\mathcal{N}_{r_n}(0, \\kappa_0 S)\n  \\end{align*}\n\\] Thus, posteriors \\[\n\\begin{align*}\n    & p(\\kappa_0 | Y, X, B_0) \\propto p(B_0|\\kappa_0) p(\\kappa_0 | \\underline s_{\\kappa_0}, \\underline \\nu_{\\kappa_0} )\\\\\n    & \\propto \\prod_{n=1}^{N}\\left(\\kappa_0^{-\\frac{1}{2}}\\right)^{r_n} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N b_n V_n (\\kappa_0 I_N)^{-1} V_n' b_n'  \\right\\} \\cdot \\kappa_0^{-\\frac{\\underline \\nu_{\\kappa_0}+2}{2}} \\exp \\left\\{  -\\frac{\\underline s_{\\kappa_0}}{2 \\kappa_0} \\right\\}\\\\\n    & \\propto \\kappa_0^{ -\\frac{\\underline \\nu_{\\kappa_0} + 2 + \\sum_{n=1}^{N}r_n}{2}} \\cdot \\exp \\left\\{  -\\frac{1}{2 \\kappa_0} \\sum_{n=1}^N b_n V_n V_n' b_n' + \\underline s_{\\kappa_0} \\right\\}\\\\\n  \\end{align*}\n  \\] This gives \\[ \\bar s_{\\kappa_0} =  \\sum_{n=1}^N b_n V_n V_n' b_n' + \\underline s_{\\kappa_0}. \\] \\[ \\bar \\nu_{\\kappa_0} = \\underline \\nu_{\\kappa_0} +\\sum_{n=1}^{N}r_n \\] Also, \\[\n  \\begin{align*}\n    & p(\\kappa_+ | Y, X, B_+, B_0, \\kappa_0) \\propto p(B_+|\\kappa_+, B_0, \\kappa_0) p(\\kappa_+ | \\underline s_{\\kappa_+}, \\underline \\nu_{\\kappa_+} )\\\\\n    & \\propto \\kappa_+^{-\\frac{KN}{2}} \\exp \\left\\{  -\\frac{1}{2} \\sum_{n=1}^N (B_{+n} - b_n V_n \\underline B) (\\kappa_+ I_{K})^{-1} (B_{+n} - b_n V_n \\underline B)'  \\right\\} \\cdot \\kappa_+^{-\\frac{\\underline \\nu_{\\kappa_+} + 2}{2}} \\exp \\left\\{  -\\frac{ \\kappa_+}{2 \\underline s_{\\kappa_+}} \\right\\}\\\\\n    & = \\kappa_+^{-\\frac{\\underline \\nu_{\\kappa_+} + KN}{2} - 1} \\cdot \\exp \\left\\{  -\\frac{1}{2} \\left( (B_{+n} - b_n V_n \\underline B)  (B_{+n} - b_n V_n \\underline B)' \\cdot \\frac{1}{\\kappa_+} + \\frac{1}{\\underline s_{\\kappa_+}} \\kappa_+  \\right) \\right\\}\\\\\n  \\end{align*}\n  \\] This gives \\[ \\lambda = -\\frac{\\underline \\nu_{\\kappa_+} + KN}{2} \\] \\[ \\chi =  \\sum_{n=1}^N  (B_{+n} - b_n V_n \\underline B)  (B_{+n} - b_n V_n \\underline B)' \\] \\[  \\Psi = \\frac{1}{\\underline s_{\\kappa_+}} \\]\nA structure function is written that creates matrices to store draws of \\(\\{\\kappa_0^{(s)}, \\kappa_+^{(s)}, B_0^{(s)}, B_+^{(s)}\\}_{s =1}^{S}\\).\n\n  init.struct = function(usedata,S){\n    kappa0 = array(NA,c(1,S))\n    kappa0[1] = 10\n    kappap = rep(NA, S)\n    kappap[1] = 10\n    B0.post = array(NA, c(usedata$N,usedata$N,S))\n    Bp.post = array(NA, c(usedata$N,usedata$K,S))\n    list(kappa0 = kappa0, kappap = kappap, B0.post = B0.post, Bp.post = Bp.post)\n  }\n\nThe sampling function is given below.\n\next.sampling = function(parameters, struct, priors, usedata){\n  B0Vlist.initial = ltexclusion(usedata)\n  B0.initial = B0Vlist.initial$B0\n  for (i in 1:(parameters$S + parameters$S.burnin)){\n    \n    # Computing posterior parameters for each draw\n    Omega.inv      = solve(struct$kappap[i] * priors$Omega)\n    Omega.post.inv = usedata$X%*%t(usedata$X) + Omega.inv\n    Omega.post     = solve(Omega.post.inv)\n    B.post         = (usedata$Y%*%t(usedata$X) + priors$B%*%Omega.inv) %*% Omega.post\n    S.post         = solve(usedata$Y%*%t(usedata$Y) + solve(struct$kappa0[i] * priors$S) + priors$B%*%Omega.inv%*%t(priors$B) - B.post%*%Omega.post.inv%*%t(B.post) )\n    nu.post        = ncol(usedata$Y) + priors$nu\n\n\n  if (i > 1){\n    B0.initial = struct$B0.post[,,i-1]\n  }\n  \n  B0.i = rgn(n=1, S.inv = solve(S.post), nu = nu.post, V = B0Vlist.initial$V, B0.initial = B0.initial)\n  B0.hat = t(chol((nu.post - usedata$N)*S.post))\n  B0.norm.i = normalize.Gibbs.output.parallel(B0.i, B0.hat)\n  Bp.i = rnorm.ngn(B0.norm.i, B.post, Omega.post)\n  \n  struct$B0.post[,,i] = B0.norm.i\n  struct$Bp.post[,,i] = Bp.i\n  \n  # Now, update kappa\n  kappa0.nu.post = priors$kappa0.nu + (usedata$N/2)\n  kappap.lambda.post = -(priors$kappap.nu + usedata$K * usedata$N)/2\n  kappap.psi.post = 1/priors$kappap.s\n  kappa0.s.post = priors$kappa0.s\n  # kappap.chi.post = 0\n  for (n in 1:usedata$N){\n    # kappa0.s.post = kappa0.s.post + B0.norm.i[n,,1] %*% t( B0.norm.i[n,,1])\n    kappa0.s.post = kappa0.s.post + sum(B0.norm.i[n,,1]^2)\n    kappap.chi.post = (Bp.i[n,,1] - B0.norm.i[n,,1] %*% B.post) %*% t(Bp.i[n,,1] - B0.norm.i[n,,1] %*% B.post)\n  }\n  \n  if (i != (parameters$S + parameters$S.burnin)){\n    struct$kappa0[i+1] = kappa0.s.post / rchisq(n=1,df = kappa0.nu.post)\n    struct$kappap[i+1] = GIGrvg::rgig(n=1, kappap.lambda.post, kappap.chi.post, kappap.psi.post)\n  }\n  }\n  struct$kappa0 = struct$kappa0[(parameters$S.burnin+1):(parameters$S.burnin + parameters$S)]\n  struct$kappap = struct$kappap[(parameters$S.burnin+1):(parameters$S.burnin + parameters$S)]\n  struct$B0.post = struct$B0.post[,,(parameters$S.burnin+1):(parameters$S.burnin + parameters$S)]\n  struct$Bp.post = struct$Bp.post[,,(parameters$S.burnin+1):(parameters$S.burnin + parameters$S)]\n  return(struct)\n  \n}\n\n\nstructPosteriorMeans = function(struct){\n  struct.means = list(\n  kappa0 = mean(struct$kappa0),\n  kappap = mean(struct$kappap),\n  B0 = rowMeans(struct$B0.post, dims = 2),\n  Bp = rowMeans(struct$Bp.post, dims = 2)\n  )\n}\n\nThe following code computes the prior, initialises matrices to store results, and samples the draws for the simulated data.\n\n\n\n\n\n\n\n\n\n\next.sim.struct.means = structPosteriorMeans(ext.sim.struct)\n\next.sim.data_B0 = pmatrix(ext.sim.struct.means$B0)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{cc}\n1.0033946 & 0.0000000\\\\\n-0.0352557 & 0.9969687\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\next.sim.data_Bp = pmatrix(ext.sim.struct.means$Bp)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{ccc}\n0.0185505 & 1.0000765 & -0.0061724\\\\\n-0.0117360 & -0.0419334 & 0.9844710\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\next.sim.data_kappa0 = pmatrix(ext.sim.struct.means$kappa0)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{c}\nx\\\\\n\\hline\n7.769759\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\next.sim.data_kappap = pmatrix(ext.sim.struct.means$kappap)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{c}\nx\\\\\n\\hline\n0.0001251\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\nThe following code computes the prior, initialises matrices to store results, and samples the draws for the actual data.\n\n\n\n\n\n\n\n\n\n\next.struct.means = structPosteriorMeans(ext.struct)\n\next.data_B0 = pmatrix(ext.struct.means$B0)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{ccccccccc}\n66.395602 & 0.000000 & 0.0000000 & 0.0000000 & 0.0000000 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n-77.289318 & 18.846577 & 0.0000000 & 0.0000000 & 0.0000000 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n-11.695185 & 3.972239 & 1.5202773 & 0.0000000 & 0.0000000 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n-17.629137 & 1.256950 & -0.3801586 & 19.7061567 & 0.0000000 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n2.732863 & -15.198262 & -0.4045523 & -1.2810428 & 0.4753866 & 0.0000000 & 0.000000 & 0.000000 & 0.000000\\\\\n-13.860021 & 7.289632 & -0.3680137 & -5.7494098 & -0.0423404 & 3.0414259 & 0.000000 & 0.000000 & 0.000000\\\\\n12.010168 & 6.340196 & 0.3378996 & -2.6718037 & -0.1841946 & 0.4357271 & 41.983725 & 0.000000 & 0.000000\\\\\n-3.353875 & -1.225709 & -0.3283358 & -0.0390807 & 0.0270688 & -0.1888343 & 5.977247 & 2.650996 & 0.000000\\\\\n-30.319338 & 18.250617 & -0.1032366 & -1.3676071 & -0.0286959 & -0.9186883 & 14.457260 & -1.054515 & 3.595097\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\next.data_Bp = pmatrix(ext.struct.means$Bp)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{ccccccccccccccccccccccccccccccccccccc}\n0.0013479 & 66.398057 & 0.0029429 & 0.0264711 & 0.0045502 & 0.0003892 & 0.0234718 & 0.0040333 & 0.0179003 & 0.0187566 & 0.0025480 & 0.0034216 & -0.0091742 & 0.0046974 & -0.0047204 & 0.0153371 & 0.0041052 & 0.0051839 & 0.0083335 & 0.0025780 & 0.0029022 & -0.0061850 & 0.0042520 & 0.0110682 & 0.0057857 & 0.0049614 & 0.0051699 & -0.0019339 & 0.0035987 & 0.0036686 & -0.0140888 & 0.0027311 & -0.0046655 & -0.0037192 & 0.0037370 & 0.0023805 & -0.0050166\\\\\n-0.0013603 & -77.291040 & 18.8443766 & -0.0270773 & -0.0052532 & -0.0051127 & -0.0239238 & -0.0029022 & -0.0184631 & -0.0199613 & -0.0012598 & -0.0023627 & 0.0036645 & -0.0043022 & 0.0065463 & -0.0174879 & -0.0033056 & -0.0097898 & -0.0090651 & -0.0023928 & -0.0025914 & 0.0088579 & -0.0026865 & -0.0067568 & -0.0064686 & -0.0042137 & -0.0081576 & 0.0025846 & -0.0026507 & -0.0028085 & 0.0182367 & -0.0019012 & 0.0027610 & 0.0050669 & -0.0033703 & -0.0055008 & 0.0062510\\\\\n-0.0004160 & -11.693174 & 3.9741589 & 1.4950490 & 0.0008645 & 0.0192506 & 0.0028813 & 0.0035568 & 0.0007315 & -0.0059643 & 0.0014501 & 0.0013926 & -0.0215304 & 0.0013130 & -0.0026791 & -0.0048322 & 0.0029514 & 0.0040315 & -0.0082991 & 0.0018945 & 0.0013493 & -0.0140014 & 0.0013708 & -0.0119191 & -0.0084102 & 0.0032695 & -0.0030476 & -0.0040802 & 0.0017870 & 0.0020847 & -0.0108497 & 0.0006528 & -0.0043702 & -0.0035422 & 0.0016513 & -0.0030420 & 0.0003031\\\\\n0.0020229 & -17.622031 & 1.2625662 & -0.4141456 & 19.7060304 & -0.0158348 & -0.0182812 & 0.0084357 & -0.0142918 & -0.0262710 & 0.0087596 & 0.0054240 & -0.0236530 & -0.0025327 & -0.0092778 & -0.0181989 & 0.0081056 & -0.0090134 & -0.0133520 & 0.0074506 & 0.0059396 & 0.0000904 & -0.0026679 & 0.0010423 & -0.0046352 & 0.0060164 & -0.0000605 & 0.0051931 & 0.0073726 & 0.0070010 & 0.0191927 & -0.0027284 & 0.0215021 & 0.0118741 & 0.0059385 & 0.0060320 & 0.0204869\\\\\n0.0009542 & 2.737512 & -15.1949283 & -0.3959779 & -1.2779367 & 0.5554441 & -0.0126424 & 0.0080841 & -0.0024324 & -0.0163383 & 0.0046280 & 0.0031391 & -0.0022891 & 0.0016615 & -0.0218268 & -0.0092718 & 0.0088021 & -0.0020680 & -0.0115318 & 0.0038253 & 0.0030763 & -0.0104323 & 0.0008225 & -0.0514790 & -0.0046210 & 0.0074136 & -0.0018333 & -0.0045193 & 0.0042416 & 0.0031777 & -0.0024375 & -0.0001755 & -0.0031887 & 0.0018467 & 0.0070967 & 0.0023818 & -0.0002903\\\\\n0.0005113 & -13.855430 & 7.2956131 & -0.3748311 & -5.7467186 & -0.0213554 & 3.0411041 & 0.0037382 & 0.0187656 & -0.0046100 & 0.0047025 & 0.0050102 & -0.0079313 & 0.0032976 & 0.0002793 & -0.0071139 & 0.0040901 & 0.0149450 & -0.0082115 & 0.0043915 & 0.0050604 & -0.0078979 & 0.0030522 & -0.0164231 & -0.0092948 & 0.0031135 & -0.0054648 & -0.0035972 & 0.0045502 & 0.0046984 & 0.0074206 & 0.0034397 & -0.0101245 & -0.0031225 & 0.0039163 & -0.0116041 & 0.0016636\\\\\n-0.0000044 & 12.011992 & 6.3409671 & 0.3376336 & -2.6720039 & -0.2051004 & 0.4317469 & 41.9849179 & 0.0157905 & 0.0067372 & 0.0028129 & 0.0024081 & 0.0026963 & 0.0012402 & 0.0111544 & 0.0072599 & 0.0030395 & 0.0124737 & 0.0021126 & 0.0022174 & 0.0020613 & 0.0050232 & 0.0014792 & 0.0072553 & 0.0023326 & 0.0026108 & 0.0166570 & 0.0027285 & 0.0012471 & 0.0018870 & 0.0015354 & 0.0015171 & 0.0093832 & 0.0029957 & 0.0024185 & 0.0196052 & -0.0056324\\\\\n0.0022776 & -3.347187 & -1.2177172 & -0.3312925 & -0.0342920 & 0.0111265 & -0.1874596 & 5.9833148 & 2.6518146 & -0.0067458 & 0.0069987 & 0.0067886 & 0.0012779 & 0.0044861 & 0.0065129 & -0.0066249 & 0.0060197 & -0.0104455 & -0.0052970 & 0.0070596 & 0.0082584 & 0.0071138 & 0.0053090 & 0.0050390 & -0.0053088 & 0.0063147 & -0.0199807 & -0.0048876 & 0.0054679 & 0.0076820 & 0.0012902 & 0.0048842 & 0.0030129 & -0.0032840 & 0.0059725 & -0.0360005 & -0.0058740\\\\\n0.0002502 & -30.317369 & 18.2514673 & -0.0999508 & -1.3660397 & -0.0029763 & -0.8950513 & 14.4581373 & -1.0375356 & 3.5921224 & 0.0013056 & 0.0021433 & -0.0107696 & 0.0005875 & 0.0158824 & -0.0040272 & 0.0020402 & 0.0153454 & -0.0111654 & 0.0021540 & 0.0017776 & -0.0126559 & -0.0007052 & -0.0149001 & -0.0109124 & 0.0010193 & 0.0225531 & -0.0126745 & 0.0019608 & 0.0007606 & -0.0080095 & -0.0006777 & -0.0290668 & -0.0132179 & 0.0010238 & 0.0069842 & -0.0106246\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\next.data_kappa0 = pmatrix(ext.struct.means$kappa0)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{c}\nx\\\\\n\\hline\n5627.497\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]\next.data_kappap = pmatrix(ext.struct.means$kappap)\n\\[\\begin{equation*}\n\\left(\n\\begin{array}{c}\nx\\\\\n\\hline\n0.0001293\\\\\n\\end{array}\n\\right)\\, .\n\\end{equation*}\\]"
  }
]